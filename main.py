import os
import json
import discord
import asyncio
from discord.ext import commands
from discord import ButtonStyle, Interaction
from discord.ui import Button, View
from datetime import datetime
import random
import uvicorn
from fastapi import FastAPI
from threading import Thread

# ========== FASTAPI KEEP ALIVE ==========
app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Bot is running"}

def start_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8080)

Thread(target=start_fastapi, daemon=True).start()

# ========== DISCORD BOT ==========
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='.', intents=intents)

DATA_FILE = "users.json"
GAME_CHANNEL_ID = 1234567890  # Thay b·∫±ng ID th·∫≠t
ADMIN_ID = 1115314183731421274
BET_DURATION = 60  # gi√¢y m·ªói phi√™n

users = {}
current_game = {"active": False}
bet_history = []

# ========== LOAD / SAVE ==========
def load_users():
    global users
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            users = json.load(f)

def save_users():
    with open(DATA_FILE, 'w') as f:
        json.dump(users, f)

# ========== GAME LOGIC ==========
def get_result():
    return random.choice(["t√†i", "x·ªâu"])

def get_cau_display():
    cau = bet_history[-8:]
    return "C·∫ßu: " + " ".join("‚ö´" if res == "t√†i" else "‚ö™" for res in cau)

async def payout():
    total_tai = sum(u['bet'] for u in current_game['bets'] if u['choice'] == 't√†i')
    total_xiu = sum(u['bet'] for u in current_game['bets'] if u['choice'] == 'x·ªâu')
    result = current_game.get("result") or get_result()
    current_game["result"] = result
    bet_history.append(result)
    bet_history[:] = bet_history[-20:]
    winners = []
    losers = []
    tax_total = 0

    for bet in current_game['bets']:
        uid = bet['user']
        bet_amount = bet['bet']
        if uid not in users:
            continue
        if bet['choice'] == result:
            profit = int(bet_amount * 0.98)
            users[uid]["balance"] += bet_amount + profit
            tax_total += bet_amount - profit
            winners.append((uid, profit))
        else:
            losers.append(uid)

    if str(ADMIN_ID) in users:
        users[str(ADMIN_ID)]["balance"] += tax_total

    save_users()
    return result, winners, losers

# ========== BOT EVENTS ==========
@bot.event
async def on_ready():
    print(f"Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n {bot.user}")
    load_users()
    asyncio.create_task(auto_game_loop())

# ========== GAME LOOP ==========
async def auto_game_loop():
    await bot.wait_until_ready()
    channel = bot.get_channel(GAME_CHANNEL_ID)
    while True:
        if not current_game["active"]:
            await start_new_game(channel)
        await asyncio.sleep(5)

async def start_new_game(ctx):
    if current_game["active"]:
        await ctx.send("Phi√™n ƒëang di·ªÖn ra.")
        return

    current_game.update({"active": True, "bets": [], "result": None})
    await send_game_message(ctx)
    await asyncio.sleep(BET_DURATION)

    if not current_game.get("result"):
        current_game["result"] = get_result()

    result, winners, losers = await payout()

    desc = f"K·∫øt qu·∫£: **{result.upper()}** üé≤\n"
    desc += f"Th·∫Øng: {', '.join([f'<@{uid}> (+{amt})' for uid, amt in winners])}\n"
    if losers:
        desc += f"Thua: {', '.join([f'<@{uid}>' for uid in losers])}"

    embed = discord.Embed(title="‚úÖ K·∫øt th√∫c phi√™n", description=desc, color=0x00ff00)
    embed.set_footer(text=get_cau_display())
    await ctx.send(embed=embed)
    current_game["active"] = False

# ========== BETTING BUTTONS ==========
class BetView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="T√†i", style=ButtonStyle.success)
    async def tai_button(self, interaction: Interaction, button: Button):
        await handle_bet(interaction, "t√†i")

    @discord.ui.button(label="X·ªâu", style=ButtonStyle.danger)
    async def xiu_button(self, interaction: Interaction, button: Button):
        await handle_bet(interaction, "x·ªâu")

async def handle_bet(ctx, choice):
    user = ctx.user if isinstance(ctx, Interaction) else ctx.author
    user_id = str(user.id)

    if not current_game.get("active"):
        await ctx.response.send_message("Ch∆∞a c√≥ phi√™n n√†o di·ªÖn ra.", ephemeral=True)
        return

    if user_id not in users:
        users[user_id] = {"balance": 10000}

    await ctx.response.send_message(f"{user.mention}, nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c ({choice.upper()}):", ephemeral=True)

    def check(m):
        return m.author.id == user.id and m.channel == ctx.channel

    try:
        msg = await bot.wait_for("message", timeout=20, check=check)
        bet_amount = int(msg.content.lower().replace("k", "000"))

        if bet_amount > users[user_id]["balance"]:
            await ctx.followup.send("‚ùå Kh√¥ng ƒë·ªß xu.", ephemeral=True)
            return

        users[user_id]["balance"] -= bet_amount
        current_game["bets"].append({"user": user_id, "choice": choice, "bet": bet_amount})
        save_users()
        await ctx.followup.send(f"‚úÖ {user.mention} ƒë√£ c∆∞·ª£c {bet_amount} v√†o **{choice.upper()}**.", ephemeral=True)

    except asyncio.TimeoutError:
        await ctx.followup.send("‚è∞ H·∫øt th·ªùi gian nh·∫≠p s·ªë ti·ªÅn.", ephemeral=True)

async def send_game_message(ctx):
    total_tai = sum(b['bet'] for b in current_game["bets"] if b["choice"] == "t√†i")
    total_xiu = sum(b['bet'] for b in current_game["bets"] if b["choice"] == "x·ªâu")
    count_tai = sum(1 for b in current_game["bets"] if b["choice"] == "t√†i")
    count_xiu = sum(1 for b in current_game["bets"] if b["choice"] == "x·ªâu")

    embed = discord.Embed(
        title="üé≤ Mini game T√†i X·ªâu",
        description=(
            f"‚è±Ô∏è Th·ªùi gian c∆∞·ª£c: {BET_DURATION} gi√¢y\n"
            f"**S·ªë ng∆∞·ªùi c∆∞·ª£c T√†i:** {count_tai} | üí∞ T·ªïng: {total_tai}\n"
            f"**S·ªë ng∆∞·ªùi c∆∞·ª£c X·ªâu:** {count_xiu} | üí∞ T·ªïng: {total_xiu}"
        ),
        color=0x00ffff,
    )
    embed.set_footer(text=get_cau_display())
    await ctx.send(embed=embed, view=BetView())

# ========== COMMANDS ==========
@bot.command()
async def game(ctx):
    if ctx.author.id == ADMIN_ID:
        await start_new_game(ctx)

@bot.command()
async def stk(ctx):
    user_id = str(ctx.author.id)
    if user_id not in users:
        users[user_id] = {"balance": 10000}
    await ctx.send(f"üí∞ {ctx.author.mention} S·ªë d∆∞: {users[user_id]['balance']} xu")

@bot.command()
async def daily(ctx):
    user_id = str(ctx.author.id)
    if user_id not in users:
        users[user_id] = {"balance": 10000, "last_daily": "2000-01-01"}
    now = datetime.now()
    last_claim = users[user_id].get("last_daily", "2000-01-01")
    last_time = datetime.strptime(last_claim, "%Y-%m-%d")

    if now.date() > last_time.date():
        users[user_id]["balance"] += 5000
        users[user_id]["last_daily"] = now.strftime("%Y-%m-%d")
        save_users()
        await ctx.send(f"‚úÖ {ctx.author.mention} ƒë√£ nh·∫≠n 5.000 xu m·ªói ng√†y.")
    else:
        await ctx.send(f"‚è≥ {ctx.author.mention} b·∫°n ƒë√£ nh·∫≠n h√¥m nay r·ªìi, quay l·∫°i ng√†y mai.")

@bot.command()
async def addmoney(ctx, member: discord.Member, amount: int):
    if ctx.author.id != ADMIN_ID:
        return
    uid = str(member.id)
    if uid not in users:
        users[uid] = {"balance": 10000}
    users[uid]["balance"] += amount
    save_users()
    await ctx.send(f"‚úÖ ƒê√£ c·ªông {amount} xu cho {member.mention}")

@bot.command()
async def give(ctx, member: discord.Member, amount: int):
    uid_sender = str(ctx.author.id)
    uid_recv = str(member.id)
    if uid_sender not in users or users[uid_sender]["balance"] < amount:
        await ctx.send("‚ùå Kh√¥ng ƒë·ªß xu ƒë·ªÉ chuy·ªÉn.")
        return
    if uid_recv not in users:
        users[uid_recv] = {"balance": 10000}
    users[uid_sender]["balance"] -= amount
    users[uid_recv]["balance"] += amount
    save_users()
    await ctx.send(f"‚úÖ {ctx.author.mention} ƒë√£ chuy·ªÉn {amount} xu cho {member.mention}.")

@bot.command()
async def off(ctx):
    if ctx.author.id != ADMIN_ID:
        return
    current_game["active"] = False
    await ctx.send("üõë Game ƒë√£ b·ªã t·∫Øt b·ªüi admin.")

# ========== START BOT ==========
TOKEN = os.environ.get("TOKEN")
bot.run(TOKEN)
